/* 
 * RAWG Video Games Database API
 *
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - Every API request should have a User-Agent header with your app name. If you donâ€™t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Rawg.Client;
using Rawg.Model;

namespace Rawg.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGamesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a list of game achievements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>ParentAchievement</returns>
        ParentAchievement GamesAchievementsRead(string id);

        /// <summary>
        /// Get a list of game achievements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>ApiResponse of ParentAchievement</returns>
        ApiResponse<ParentAchievement> GamesAchievementsReadWithHttpInfo(string id);
        /// <summary>
        /// Get a list of DLC&#39;s for the game, GOTY and other editions, companion apps, etc.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GamesAdditionsList(string gamePk, int? page = null, int? pageSize = null);

        /// <summary>
        /// Get a list of DLC&#39;s for the game, GOTY and other editions, companion apps, etc.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GamesAdditionsListWithHttpInfo(string gamePk, int? page = null, int? pageSize = null);
        /// <summary>
        /// Get a list of individual creators that were part of the development team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 GamesDevelopmentTeamList(string gamePk, string ordering = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// Get a list of individual creators that were part of the development team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> GamesDevelopmentTeamListWithHttpInfo(string gamePk, string ordering = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// Get a list of games that are part of the same series.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GamesGameSeriesList(string gamePk, int? page = null, int? pageSize = null);

        /// <summary>
        /// Get a list of games that are part of the same series.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GamesGameSeriesListWithHttpInfo(string gamePk, int? page = null, int? pageSize = null);
        /// <summary>
        /// Get a list of games.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="search">Search query. (optional)</param>
        /// <param name="parentPlatforms">Filter by parent platforms, for example: &#x60;1,2,3&#x60;. (optional)</param>
        /// <param name="platforms">Filter by platforms, for example: &#x60;4,5&#x60;. (optional)</param>
        /// <param name="stores">Filter by stores, for example: &#x60;5,6&#x60;. (optional)</param>
        /// <param name="developers">Filter by developers, for example: &#x60;1612,18893&#x60; or &#x60;valve-software,feral-interactive&#x60;. (optional)</param>
        /// <param name="publishers">Filter by publishers, for example: &#x60;354,20987&#x60; or &#x60;electronic-arts,microsoft-studios&#x60;. (optional)</param>
        /// <param name="genres">Filter by genres, for example: &#x60;4,51&#x60; or &#x60;action,indie&#x60;. (optional)</param>
        /// <param name="tags">Filter by tags, for example: &#x60;31,7&#x60; or &#x60;singleplayer,multiplayer&#x60;. (optional)</param>
        /// <param name="creators">Filter by creators, for example: &#x60;78,28&#x60; or &#x60;cris-velasco,mike-morasky&#x60;. (optional)</param>
        /// <param name="dates">Filter by a release date, for example: &#x60;2010-01-01,2018-12-31.1960-01-01,1969-12-31&#x60;. (optional)</param>
        /// <param name="platformsCount">Filter by platforms count, for example: &#x60;1&#x60;. (optional)</param>
        /// <param name="excludeCollection">Exclude games from a particular collection, for example: &#x60;123&#x60;. (optional)</param>
        /// <param name="excludeAdditions">Exclude additions. (optional)</param>
        /// <param name="excludeParents">Exclude games which have additions. (optional)</param>
        /// <param name="excludeGameSeries">Exclude games which included in a game series. (optional)</param>
        /// <param name="ordering">Available fields: &#x60;name&#x60;, &#x60;released&#x60;, &#x60;added&#x60;, &#x60;created&#x60;, &#x60;rating&#x60;. You can reverse the sort order adding a hyphen, for example: &#x60;-released&#x60;. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GamesList(int? page = null, int? pageSize = null, string search = null, string parentPlatforms = null, string platforms = null, string stores = null, string developers = null, string publishers = null, string genres = null, string tags = null, string creators = null, string dates = null, int? platformsCount = null, int? excludeCollection = null, bool? excludeAdditions = null, bool? excludeParents = null, bool? excludeGameSeries = null, string ordering = null);

        /// <summary>
        /// Get a list of games.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="search">Search query. (optional)</param>
        /// <param name="parentPlatforms">Filter by parent platforms, for example: &#x60;1,2,3&#x60;. (optional)</param>
        /// <param name="platforms">Filter by platforms, for example: &#x60;4,5&#x60;. (optional)</param>
        /// <param name="stores">Filter by stores, for example: &#x60;5,6&#x60;. (optional)</param>
        /// <param name="developers">Filter by developers, for example: &#x60;1612,18893&#x60; or &#x60;valve-software,feral-interactive&#x60;. (optional)</param>
        /// <param name="publishers">Filter by publishers, for example: &#x60;354,20987&#x60; or &#x60;electronic-arts,microsoft-studios&#x60;. (optional)</param>
        /// <param name="genres">Filter by genres, for example: &#x60;4,51&#x60; or &#x60;action,indie&#x60;. (optional)</param>
        /// <param name="tags">Filter by tags, for example: &#x60;31,7&#x60; or &#x60;singleplayer,multiplayer&#x60;. (optional)</param>
        /// <param name="creators">Filter by creators, for example: &#x60;78,28&#x60; or &#x60;cris-velasco,mike-morasky&#x60;. (optional)</param>
        /// <param name="dates">Filter by a release date, for example: &#x60;2010-01-01,2018-12-31.1960-01-01,1969-12-31&#x60;. (optional)</param>
        /// <param name="platformsCount">Filter by platforms count, for example: &#x60;1&#x60;. (optional)</param>
        /// <param name="excludeCollection">Exclude games from a particular collection, for example: &#x60;123&#x60;. (optional)</param>
        /// <param name="excludeAdditions">Exclude additions. (optional)</param>
        /// <param name="excludeParents">Exclude games which have additions. (optional)</param>
        /// <param name="excludeGameSeries">Exclude games which included in a game series. (optional)</param>
        /// <param name="ordering">Available fields: &#x60;name&#x60;, &#x60;released&#x60;, &#x60;added&#x60;, &#x60;created&#x60;, &#x60;rating&#x60;. You can reverse the sort order adding a hyphen, for example: &#x60;-released&#x60;. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GamesListWithHttpInfo(int? page = null, int? pageSize = null, string search = null, string parentPlatforms = null, string platforms = null, string stores = null, string developers = null, string publishers = null, string genres = null, string tags = null, string creators = null, string dates = null, int? platformsCount = null, int? excludeCollection = null, bool? excludeAdditions = null, bool? excludeParents = null, bool? excludeGameSeries = null, string ordering = null);
        /// <summary>
        /// Get a list of game trailers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Movie</returns>
        Movie GamesMoviesRead(string id);

        /// <summary>
        /// Get a list of game trailers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>ApiResponse of Movie</returns>
        ApiResponse<Movie> GamesMoviesReadWithHttpInfo(string id);
        /// <summary>
        /// Get a list of parent games for DLC&#39;s and editions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GamesParentGamesList(string gamePk, int? page = null, int? pageSize = null);

        /// <summary>
        /// Get a list of parent games for DLC&#39;s and editions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GamesParentGamesListWithHttpInfo(string gamePk, int? page = null, int? pageSize = null);
        /// <summary>
        /// Get details of the game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>GameSingle</returns>
        GameSingle GamesRead(string id);

        /// <summary>
        /// Get details of the game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>ApiResponse of GameSingle</returns>
        ApiResponse<GameSingle> GamesReadWithHttpInfo(string id);
        /// <summary>
        /// Get a list of most recent posts from the game&#39;s subreddit.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Reddit</returns>
        Reddit GamesRedditRead(string id);

        /// <summary>
        /// Get a list of most recent posts from the game&#39;s subreddit.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>ApiResponse of Reddit</returns>
        ApiResponse<Reddit> GamesRedditReadWithHttpInfo(string id);
        /// <summary>
        /// Get screenshots for the game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 GamesScreenshotsList(string gamePk, string ordering = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// Get screenshots for the game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> GamesScreenshotsListWithHttpInfo(string gamePk, string ordering = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// Get The Sitemap Games list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GamesSitemapRead(int? page = null, int? pageSize = null);

        /// <summary>
        /// Get The Sitemap Games list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GamesSitemapReadWithHttpInfo(int? page = null, int? pageSize = null);
        /// <summary>
        /// Get links to the stores that sell the game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 GamesStoresList(string gamePk, string ordering = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// Get links to the stores that sell the game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> GamesStoresListWithHttpInfo(string gamePk, string ordering = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// Get a list of visually similar games.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>GameSingle</returns>
        GameSingle GamesSuggestedRead(string id);

        /// <summary>
        /// Get a list of visually similar games.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>ApiResponse of GameSingle</returns>
        ApiResponse<GameSingle> GamesSuggestedReadWithHttpInfo(string id);
        /// <summary>
        /// Get streams on Twitch associated with the game .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Twitch</returns>
        Twitch GamesTwitchRead(string id);

        /// <summary>
        /// Get streams on Twitch associated with the game .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>ApiResponse of Twitch</returns>
        ApiResponse<Twitch> GamesTwitchReadWithHttpInfo(string id);
        /// <summary>
        /// Get videos from YouTube associated with the game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Youtube</returns>
        Youtube GamesYoutubeRead(string id);

        /// <summary>
        /// Get videos from YouTube associated with the game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>ApiResponse of Youtube</returns>
        ApiResponse<Youtube> GamesYoutubeReadWithHttpInfo(string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a list of game achievements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of ParentAchievement</returns>
        System.Threading.Tasks.Task<ParentAchievement> GamesAchievementsReadAsync(string id);

        /// <summary>
        /// Get a list of game achievements.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of ApiResponse (ParentAchievement)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParentAchievement>> GamesAchievementsReadAsyncWithHttpInfo(string id);
        /// <summary>
        /// Get a list of DLC&#39;s for the game, GOTY and other editions, companion apps, etc.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GamesAdditionsListAsync(string gamePk, int? page = null, int? pageSize = null);

        /// <summary>
        /// Get a list of DLC&#39;s for the game, GOTY and other editions, companion apps, etc.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GamesAdditionsListAsyncWithHttpInfo(string gamePk, int? page = null, int? pageSize = null);
        /// <summary>
        /// Get a list of individual creators that were part of the development team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> GamesDevelopmentTeamListAsync(string gamePk, string ordering = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// Get a list of individual creators that were part of the development team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GamesDevelopmentTeamListAsyncWithHttpInfo(string gamePk, string ordering = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// Get a list of games that are part of the same series.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GamesGameSeriesListAsync(string gamePk, int? page = null, int? pageSize = null);

        /// <summary>
        /// Get a list of games that are part of the same series.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GamesGameSeriesListAsyncWithHttpInfo(string gamePk, int? page = null, int? pageSize = null);
        /// <summary>
        /// Get a list of games.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="search">Search query. (optional)</param>
        /// <param name="parentPlatforms">Filter by parent platforms, for example: &#x60;1,2,3&#x60;. (optional)</param>
        /// <param name="platforms">Filter by platforms, for example: &#x60;4,5&#x60;. (optional)</param>
        /// <param name="stores">Filter by stores, for example: &#x60;5,6&#x60;. (optional)</param>
        /// <param name="developers">Filter by developers, for example: &#x60;1612,18893&#x60; or &#x60;valve-software,feral-interactive&#x60;. (optional)</param>
        /// <param name="publishers">Filter by publishers, for example: &#x60;354,20987&#x60; or &#x60;electronic-arts,microsoft-studios&#x60;. (optional)</param>
        /// <param name="genres">Filter by genres, for example: &#x60;4,51&#x60; or &#x60;action,indie&#x60;. (optional)</param>
        /// <param name="tags">Filter by tags, for example: &#x60;31,7&#x60; or &#x60;singleplayer,multiplayer&#x60;. (optional)</param>
        /// <param name="creators">Filter by creators, for example: &#x60;78,28&#x60; or &#x60;cris-velasco,mike-morasky&#x60;. (optional)</param>
        /// <param name="dates">Filter by a release date, for example: &#x60;2010-01-01,2018-12-31.1960-01-01,1969-12-31&#x60;. (optional)</param>
        /// <param name="platformsCount">Filter by platforms count, for example: &#x60;1&#x60;. (optional)</param>
        /// <param name="excludeCollection">Exclude games from a particular collection, for example: &#x60;123&#x60;. (optional)</param>
        /// <param name="excludeAdditions">Exclude additions. (optional)</param>
        /// <param name="excludeParents">Exclude games which have additions. (optional)</param>
        /// <param name="excludeGameSeries">Exclude games which included in a game series. (optional)</param>
        /// <param name="ordering">Available fields: &#x60;name&#x60;, &#x60;released&#x60;, &#x60;added&#x60;, &#x60;created&#x60;, &#x60;rating&#x60;. You can reverse the sort order adding a hyphen, for example: &#x60;-released&#x60;. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GamesListAsync(int? page = null, int? pageSize = null, string search = null, string parentPlatforms = null, string platforms = null, string stores = null, string developers = null, string publishers = null, string genres = null, string tags = null, string creators = null, string dates = null, int? platformsCount = null, int? excludeCollection = null, bool? excludeAdditions = null, bool? excludeParents = null, bool? excludeGameSeries = null, string ordering = null);

        /// <summary>
        /// Get a list of games.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="search">Search query. (optional)</param>
        /// <param name="parentPlatforms">Filter by parent platforms, for example: &#x60;1,2,3&#x60;. (optional)</param>
        /// <param name="platforms">Filter by platforms, for example: &#x60;4,5&#x60;. (optional)</param>
        /// <param name="stores">Filter by stores, for example: &#x60;5,6&#x60;. (optional)</param>
        /// <param name="developers">Filter by developers, for example: &#x60;1612,18893&#x60; or &#x60;valve-software,feral-interactive&#x60;. (optional)</param>
        /// <param name="publishers">Filter by publishers, for example: &#x60;354,20987&#x60; or &#x60;electronic-arts,microsoft-studios&#x60;. (optional)</param>
        /// <param name="genres">Filter by genres, for example: &#x60;4,51&#x60; or &#x60;action,indie&#x60;. (optional)</param>
        /// <param name="tags">Filter by tags, for example: &#x60;31,7&#x60; or &#x60;singleplayer,multiplayer&#x60;. (optional)</param>
        /// <param name="creators">Filter by creators, for example: &#x60;78,28&#x60; or &#x60;cris-velasco,mike-morasky&#x60;. (optional)</param>
        /// <param name="dates">Filter by a release date, for example: &#x60;2010-01-01,2018-12-31.1960-01-01,1969-12-31&#x60;. (optional)</param>
        /// <param name="platformsCount">Filter by platforms count, for example: &#x60;1&#x60;. (optional)</param>
        /// <param name="excludeCollection">Exclude games from a particular collection, for example: &#x60;123&#x60;. (optional)</param>
        /// <param name="excludeAdditions">Exclude additions. (optional)</param>
        /// <param name="excludeParents">Exclude games which have additions. (optional)</param>
        /// <param name="excludeGameSeries">Exclude games which included in a game series. (optional)</param>
        /// <param name="ordering">Available fields: &#x60;name&#x60;, &#x60;released&#x60;, &#x60;added&#x60;, &#x60;created&#x60;, &#x60;rating&#x60;. You can reverse the sort order adding a hyphen, for example: &#x60;-released&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GamesListAsyncWithHttpInfo(int? page = null, int? pageSize = null, string search = null, string parentPlatforms = null, string platforms = null, string stores = null, string developers = null, string publishers = null, string genres = null, string tags = null, string creators = null, string dates = null, int? platformsCount = null, int? excludeCollection = null, bool? excludeAdditions = null, bool? excludeParents = null, bool? excludeGameSeries = null, string ordering = null);
        /// <summary>
        /// Get a list of game trailers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of Movie</returns>
        System.Threading.Tasks.Task<Movie> GamesMoviesReadAsync(string id);

        /// <summary>
        /// Get a list of game trailers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        System.Threading.Tasks.Task<ApiResponse<Movie>> GamesMoviesReadAsyncWithHttpInfo(string id);
        /// <summary>
        /// Get a list of parent games for DLC&#39;s and editions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GamesParentGamesListAsync(string gamePk, int? page = null, int? pageSize = null);

        /// <summary>
        /// Get a list of parent games for DLC&#39;s and editions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GamesParentGamesListAsyncWithHttpInfo(string gamePk, int? page = null, int? pageSize = null);
        /// <summary>
        /// Get details of the game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of GameSingle</returns>
        System.Threading.Tasks.Task<GameSingle> GamesReadAsync(string id);

        /// <summary>
        /// Get details of the game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of ApiResponse (GameSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameSingle>> GamesReadAsyncWithHttpInfo(string id);
        /// <summary>
        /// Get a list of most recent posts from the game&#39;s subreddit.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of Reddit</returns>
        System.Threading.Tasks.Task<Reddit> GamesRedditReadAsync(string id);

        /// <summary>
        /// Get a list of most recent posts from the game&#39;s subreddit.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of ApiResponse (Reddit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Reddit>> GamesRedditReadAsyncWithHttpInfo(string id);
        /// <summary>
        /// Get screenshots for the game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> GamesScreenshotsListAsync(string gamePk, string ordering = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// Get screenshots for the game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GamesScreenshotsListAsyncWithHttpInfo(string gamePk, string ordering = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// Get The Sitemap Games list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GamesSitemapReadAsync(int? page = null, int? pageSize = null);

        /// <summary>
        /// Get The Sitemap Games list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GamesSitemapReadAsyncWithHttpInfo(int? page = null, int? pageSize = null);
        /// <summary>
        /// Get links to the stores that sell the game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> GamesStoresListAsync(string gamePk, string ordering = null, int? page = null, int? pageSize = null);

        /// <summary>
        /// Get links to the stores that sell the game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GamesStoresListAsyncWithHttpInfo(string gamePk, string ordering = null, int? page = null, int? pageSize = null);
        /// <summary>
        /// Get a list of visually similar games.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of GameSingle</returns>
        System.Threading.Tasks.Task<GameSingle> GamesSuggestedReadAsync(string id);

        /// <summary>
        /// Get a list of visually similar games.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of ApiResponse (GameSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameSingle>> GamesSuggestedReadAsyncWithHttpInfo(string id);
        /// <summary>
        /// Get streams on Twitch associated with the game .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of Twitch</returns>
        System.Threading.Tasks.Task<Twitch> GamesTwitchReadAsync(string id);

        /// <summary>
        /// Get streams on Twitch associated with the game .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of ApiResponse (Twitch)</returns>
        System.Threading.Tasks.Task<ApiResponse<Twitch>> GamesTwitchReadAsyncWithHttpInfo(string id);
        /// <summary>
        /// Get videos from YouTube associated with the game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of Youtube</returns>
        System.Threading.Tasks.Task<Youtube> GamesYoutubeReadAsync(string id);

        /// <summary>
        /// Get videos from YouTube associated with the game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of ApiResponse (Youtube)</returns>
        System.Threading.Tasks.Task<ApiResponse<Youtube>> GamesYoutubeReadAsyncWithHttpInfo(string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GamesApi : IGamesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GamesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GamesApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GamesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GamesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a list of game achievements. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>ParentAchievement</returns>
        public ParentAchievement GamesAchievementsRead(string id)
        {
            ApiResponse<ParentAchievement> localVarResponse = GamesAchievementsReadWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of game achievements. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>ApiResponse of ParentAchievement</returns>
        public ApiResponse<ParentAchievement> GamesAchievementsReadWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamesApi->GamesAchievementsRead");

            var localVarPath = "/games/{id}/achievements";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesAchievementsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParentAchievement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ParentAchievement)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParentAchievement)));
        }

        /// <summary>
        /// Get a list of game achievements. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of ParentAchievement</returns>
        public async System.Threading.Tasks.Task<ParentAchievement> GamesAchievementsReadAsync(string id)
        {
            ApiResponse<ParentAchievement> localVarResponse = await GamesAchievementsReadAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of game achievements. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of ApiResponse (ParentAchievement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ParentAchievement>> GamesAchievementsReadAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamesApi->GamesAchievementsRead");

            var localVarPath = "/games/{id}/achievements";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesAchievementsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParentAchievement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ParentAchievement)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParentAchievement)));
        }

        /// <summary>
        /// Get a list of DLC&#39;s for the game, GOTY and other editions, companion apps, etc. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GamesAdditionsList(string gamePk, int? page = null, int? pageSize = null)
        {
            ApiResponse<InlineResponse2003> localVarResponse = GamesAdditionsListWithHttpInfo(gamePk, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of DLC&#39;s for the game, GOTY and other editions, companion apps, etc. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> GamesAdditionsListWithHttpInfo(string gamePk, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'gamePk' is set
            if (gamePk == null)
                throw new ApiException(400, "Missing required parameter 'gamePk' when calling GamesApi->GamesAdditionsList");

            var localVarPath = "/games/{game_pk}/additions";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gamePk != null) localVarPathParams.Add("game_pk", Configuration.ApiClient.ParameterToString(gamePk)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesAdditionsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Get a list of DLC&#39;s for the game, GOTY and other editions, companion apps, etc. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> GamesAdditionsListAsync(string gamePk, int? page = null, int? pageSize = null)
        {
            ApiResponse<InlineResponse2003> localVarResponse = await GamesAdditionsListAsyncWithHttpInfo(gamePk, page, pageSize);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of DLC&#39;s for the game, GOTY and other editions, companion apps, etc. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GamesAdditionsListAsyncWithHttpInfo(string gamePk, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'gamePk' is set
            if (gamePk == null)
                throw new ApiException(400, "Missing required parameter 'gamePk' when calling GamesApi->GamesAdditionsList");

            var localVarPath = "/games/{game_pk}/additions";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gamePk != null) localVarPathParams.Add("game_pk", Configuration.ApiClient.ParameterToString(gamePk)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesAdditionsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Get a list of individual creators that were part of the development team. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 GamesDevelopmentTeamList(string gamePk, string ordering = null, int? page = null, int? pageSize = null)
        {
            ApiResponse<InlineResponse2005> localVarResponse = GamesDevelopmentTeamListWithHttpInfo(gamePk, ordering, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of individual creators that were part of the development team. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse<InlineResponse2005> GamesDevelopmentTeamListWithHttpInfo(string gamePk, string ordering = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'gamePk' is set
            if (gamePk == null)
                throw new ApiException(400, "Missing required parameter 'gamePk' when calling GamesApi->GamesDevelopmentTeamList");

            var localVarPath = "/games/{game_pk}/development-team";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gamePk != null) localVarPathParams.Add("game_pk", Configuration.ApiClient.ParameterToString(gamePk)); // path parameter
            if (ordering != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ordering", ordering)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesDevelopmentTeamList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2005)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Get a list of individual creators that were part of the development team. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> GamesDevelopmentTeamListAsync(string gamePk, string ordering = null, int? page = null, int? pageSize = null)
        {
            ApiResponse<InlineResponse2005> localVarResponse = await GamesDevelopmentTeamListAsyncWithHttpInfo(gamePk, ordering, page, pageSize);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of individual creators that were part of the development team. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GamesDevelopmentTeamListAsyncWithHttpInfo(string gamePk, string ordering = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'gamePk' is set
            if (gamePk == null)
                throw new ApiException(400, "Missing required parameter 'gamePk' when calling GamesApi->GamesDevelopmentTeamList");

            var localVarPath = "/games/{game_pk}/development-team";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gamePk != null) localVarPathParams.Add("game_pk", Configuration.ApiClient.ParameterToString(gamePk)); // path parameter
            if (ordering != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ordering", ordering)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesDevelopmentTeamList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2005)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Get a list of games that are part of the same series. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GamesGameSeriesList(string gamePk, int? page = null, int? pageSize = null)
        {
            ApiResponse<InlineResponse2003> localVarResponse = GamesGameSeriesListWithHttpInfo(gamePk, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of games that are part of the same series. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> GamesGameSeriesListWithHttpInfo(string gamePk, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'gamePk' is set
            if (gamePk == null)
                throw new ApiException(400, "Missing required parameter 'gamePk' when calling GamesApi->GamesGameSeriesList");

            var localVarPath = "/games/{game_pk}/game-series";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gamePk != null) localVarPathParams.Add("game_pk", Configuration.ApiClient.ParameterToString(gamePk)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesGameSeriesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Get a list of games that are part of the same series. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> GamesGameSeriesListAsync(string gamePk, int? page = null, int? pageSize = null)
        {
            ApiResponse<InlineResponse2003> localVarResponse = await GamesGameSeriesListAsyncWithHttpInfo(gamePk, page, pageSize);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of games that are part of the same series. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GamesGameSeriesListAsyncWithHttpInfo(string gamePk, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'gamePk' is set
            if (gamePk == null)
                throw new ApiException(400, "Missing required parameter 'gamePk' when calling GamesApi->GamesGameSeriesList");

            var localVarPath = "/games/{game_pk}/game-series";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gamePk != null) localVarPathParams.Add("game_pk", Configuration.ApiClient.ParameterToString(gamePk)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesGameSeriesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Get a list of games. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="search">Search query. (optional)</param>
        /// <param name="parentPlatforms">Filter by parent platforms, for example: &#x60;1,2,3&#x60;. (optional)</param>
        /// <param name="platforms">Filter by platforms, for example: &#x60;4,5&#x60;. (optional)</param>
        /// <param name="stores">Filter by stores, for example: &#x60;5,6&#x60;. (optional)</param>
        /// <param name="developers">Filter by developers, for example: &#x60;1612,18893&#x60; or &#x60;valve-software,feral-interactive&#x60;. (optional)</param>
        /// <param name="publishers">Filter by publishers, for example: &#x60;354,20987&#x60; or &#x60;electronic-arts,microsoft-studios&#x60;. (optional)</param>
        /// <param name="genres">Filter by genres, for example: &#x60;4,51&#x60; or &#x60;action,indie&#x60;. (optional)</param>
        /// <param name="tags">Filter by tags, for example: &#x60;31,7&#x60; or &#x60;singleplayer,multiplayer&#x60;. (optional)</param>
        /// <param name="creators">Filter by creators, for example: &#x60;78,28&#x60; or &#x60;cris-velasco,mike-morasky&#x60;. (optional)</param>
        /// <param name="dates">Filter by a release date, for example: &#x60;2010-01-01,2018-12-31.1960-01-01,1969-12-31&#x60;. (optional)</param>
        /// <param name="platformsCount">Filter by platforms count, for example: &#x60;1&#x60;. (optional)</param>
        /// <param name="excludeCollection">Exclude games from a particular collection, for example: &#x60;123&#x60;. (optional)</param>
        /// <param name="excludeAdditions">Exclude additions. (optional)</param>
        /// <param name="excludeParents">Exclude games which have additions. (optional)</param>
        /// <param name="excludeGameSeries">Exclude games which included in a game series. (optional)</param>
        /// <param name="ordering">Available fields: &#x60;name&#x60;, &#x60;released&#x60;, &#x60;added&#x60;, &#x60;created&#x60;, &#x60;rating&#x60;. You can reverse the sort order adding a hyphen, for example: &#x60;-released&#x60;. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GamesList(int? page = null, int? pageSize = null, string search = null, string parentPlatforms = null, string platforms = null, string stores = null, string developers = null, string publishers = null, string genres = null, string tags = null, string creators = null, string dates = null, int? platformsCount = null, int? excludeCollection = null, bool? excludeAdditions = null, bool? excludeParents = null, bool? excludeGameSeries = null, string ordering = null)
        {
            ApiResponse<InlineResponse2003> localVarResponse = GamesListWithHttpInfo(page, pageSize, search, parentPlatforms, platforms, stores, developers, publishers, genres, tags, creators, dates, platformsCount, excludeCollection, excludeAdditions, excludeParents, excludeGameSeries, ordering);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of games. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="search">Search query. (optional)</param>
        /// <param name="parentPlatforms">Filter by parent platforms, for example: &#x60;1,2,3&#x60;. (optional)</param>
        /// <param name="platforms">Filter by platforms, for example: &#x60;4,5&#x60;. (optional)</param>
        /// <param name="stores">Filter by stores, for example: &#x60;5,6&#x60;. (optional)</param>
        /// <param name="developers">Filter by developers, for example: &#x60;1612,18893&#x60; or &#x60;valve-software,feral-interactive&#x60;. (optional)</param>
        /// <param name="publishers">Filter by publishers, for example: &#x60;354,20987&#x60; or &#x60;electronic-arts,microsoft-studios&#x60;. (optional)</param>
        /// <param name="genres">Filter by genres, for example: &#x60;4,51&#x60; or &#x60;action,indie&#x60;. (optional)</param>
        /// <param name="tags">Filter by tags, for example: &#x60;31,7&#x60; or &#x60;singleplayer,multiplayer&#x60;. (optional)</param>
        /// <param name="creators">Filter by creators, for example: &#x60;78,28&#x60; or &#x60;cris-velasco,mike-morasky&#x60;. (optional)</param>
        /// <param name="dates">Filter by a release date, for example: &#x60;2010-01-01,2018-12-31.1960-01-01,1969-12-31&#x60;. (optional)</param>
        /// <param name="platformsCount">Filter by platforms count, for example: &#x60;1&#x60;. (optional)</param>
        /// <param name="excludeCollection">Exclude games from a particular collection, for example: &#x60;123&#x60;. (optional)</param>
        /// <param name="excludeAdditions">Exclude additions. (optional)</param>
        /// <param name="excludeParents">Exclude games which have additions. (optional)</param>
        /// <param name="excludeGameSeries">Exclude games which included in a game series. (optional)</param>
        /// <param name="ordering">Available fields: &#x60;name&#x60;, &#x60;released&#x60;, &#x60;added&#x60;, &#x60;created&#x60;, &#x60;rating&#x60;. You can reverse the sort order adding a hyphen, for example: &#x60;-released&#x60;. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> GamesListWithHttpInfo(int? page = null, int? pageSize = null, string search = null, string parentPlatforms = null, string platforms = null, string stores = null, string developers = null, string publishers = null, string genres = null, string tags = null, string creators = null, string dates = null, int? platformsCount = null, int? excludeCollection = null, bool? excludeAdditions = null, bool? excludeParents = null, bool? excludeGameSeries = null, string ordering = null)
        {

            var localVarPath = "/games";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (search != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (parentPlatforms != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_platforms", parentPlatforms)); // query parameter
            if (platforms != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "platforms", platforms)); // query parameter
            if (stores != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stores", stores)); // query parameter
            if (developers != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "developers", developers)); // query parameter
            if (publishers != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "publishers", publishers)); // query parameter
            if (genres != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "genres", genres)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tags", tags)); // query parameter
            if (creators != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "creators", creators)); // query parameter
            if (dates != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dates", dates)); // query parameter
            if (platformsCount != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "platforms_count", platformsCount)); // query parameter
            if (excludeCollection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_collection", excludeCollection)); // query parameter
            if (excludeAdditions != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_additions", excludeAdditions)); // query parameter
            if (excludeParents != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_parents", excludeParents)); // query parameter
            if (excludeGameSeries != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_game_series", excludeGameSeries)); // query parameter
            if (ordering != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ordering", ordering)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Get a list of games. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="search">Search query. (optional)</param>
        /// <param name="parentPlatforms">Filter by parent platforms, for example: &#x60;1,2,3&#x60;. (optional)</param>
        /// <param name="platforms">Filter by platforms, for example: &#x60;4,5&#x60;. (optional)</param>
        /// <param name="stores">Filter by stores, for example: &#x60;5,6&#x60;. (optional)</param>
        /// <param name="developers">Filter by developers, for example: &#x60;1612,18893&#x60; or &#x60;valve-software,feral-interactive&#x60;. (optional)</param>
        /// <param name="publishers">Filter by publishers, for example: &#x60;354,20987&#x60; or &#x60;electronic-arts,microsoft-studios&#x60;. (optional)</param>
        /// <param name="genres">Filter by genres, for example: &#x60;4,51&#x60; or &#x60;action,indie&#x60;. (optional)</param>
        /// <param name="tags">Filter by tags, for example: &#x60;31,7&#x60; or &#x60;singleplayer,multiplayer&#x60;. (optional)</param>
        /// <param name="creators">Filter by creators, for example: &#x60;78,28&#x60; or &#x60;cris-velasco,mike-morasky&#x60;. (optional)</param>
        /// <param name="dates">Filter by a release date, for example: &#x60;2010-01-01,2018-12-31.1960-01-01,1969-12-31&#x60;. (optional)</param>
        /// <param name="platformsCount">Filter by platforms count, for example: &#x60;1&#x60;. (optional)</param>
        /// <param name="excludeCollection">Exclude games from a particular collection, for example: &#x60;123&#x60;. (optional)</param>
        /// <param name="excludeAdditions">Exclude additions. (optional)</param>
        /// <param name="excludeParents">Exclude games which have additions. (optional)</param>
        /// <param name="excludeGameSeries">Exclude games which included in a game series. (optional)</param>
        /// <param name="ordering">Available fields: &#x60;name&#x60;, &#x60;released&#x60;, &#x60;added&#x60;, &#x60;created&#x60;, &#x60;rating&#x60;. You can reverse the sort order adding a hyphen, for example: &#x60;-released&#x60;. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> GamesListAsync(int? page = null, int? pageSize = null, string search = null, string parentPlatforms = null, string platforms = null, string stores = null, string developers = null, string publishers = null, string genres = null, string tags = null, string creators = null, string dates = null, int? platformsCount = null, int? excludeCollection = null, bool? excludeAdditions = null, bool? excludeParents = null, bool? excludeGameSeries = null, string ordering = null)
        {
            ApiResponse<InlineResponse2003> localVarResponse = await GamesListAsyncWithHttpInfo(page, pageSize, search, parentPlatforms, platforms, stores, developers, publishers, genres, tags, creators, dates, platformsCount, excludeCollection, excludeAdditions, excludeParents, excludeGameSeries, ordering);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of games. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="search">Search query. (optional)</param>
        /// <param name="parentPlatforms">Filter by parent platforms, for example: &#x60;1,2,3&#x60;. (optional)</param>
        /// <param name="platforms">Filter by platforms, for example: &#x60;4,5&#x60;. (optional)</param>
        /// <param name="stores">Filter by stores, for example: &#x60;5,6&#x60;. (optional)</param>
        /// <param name="developers">Filter by developers, for example: &#x60;1612,18893&#x60; or &#x60;valve-software,feral-interactive&#x60;. (optional)</param>
        /// <param name="publishers">Filter by publishers, for example: &#x60;354,20987&#x60; or &#x60;electronic-arts,microsoft-studios&#x60;. (optional)</param>
        /// <param name="genres">Filter by genres, for example: &#x60;4,51&#x60; or &#x60;action,indie&#x60;. (optional)</param>
        /// <param name="tags">Filter by tags, for example: &#x60;31,7&#x60; or &#x60;singleplayer,multiplayer&#x60;. (optional)</param>
        /// <param name="creators">Filter by creators, for example: &#x60;78,28&#x60; or &#x60;cris-velasco,mike-morasky&#x60;. (optional)</param>
        /// <param name="dates">Filter by a release date, for example: &#x60;2010-01-01,2018-12-31.1960-01-01,1969-12-31&#x60;. (optional)</param>
        /// <param name="platformsCount">Filter by platforms count, for example: &#x60;1&#x60;. (optional)</param>
        /// <param name="excludeCollection">Exclude games from a particular collection, for example: &#x60;123&#x60;. (optional)</param>
        /// <param name="excludeAdditions">Exclude additions. (optional)</param>
        /// <param name="excludeParents">Exclude games which have additions. (optional)</param>
        /// <param name="excludeGameSeries">Exclude games which included in a game series. (optional)</param>
        /// <param name="ordering">Available fields: &#x60;name&#x60;, &#x60;released&#x60;, &#x60;added&#x60;, &#x60;created&#x60;, &#x60;rating&#x60;. You can reverse the sort order adding a hyphen, for example: &#x60;-released&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GamesListAsyncWithHttpInfo(int? page = null, int? pageSize = null, string search = null, string parentPlatforms = null, string platforms = null, string stores = null, string developers = null, string publishers = null, string genres = null, string tags = null, string creators = null, string dates = null, int? platformsCount = null, int? excludeCollection = null, bool? excludeAdditions = null, bool? excludeParents = null, bool? excludeGameSeries = null, string ordering = null)
        {

            var localVarPath = "/games";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (search != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (parentPlatforms != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_platforms", parentPlatforms)); // query parameter
            if (platforms != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "platforms", platforms)); // query parameter
            if (stores != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stores", stores)); // query parameter
            if (developers != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "developers", developers)); // query parameter
            if (publishers != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "publishers", publishers)); // query parameter
            if (genres != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "genres", genres)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tags", tags)); // query parameter
            if (creators != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "creators", creators)); // query parameter
            if (dates != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dates", dates)); // query parameter
            if (platformsCount != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "platforms_count", platformsCount)); // query parameter
            if (excludeCollection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_collection", excludeCollection)); // query parameter
            if (excludeAdditions != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_additions", excludeAdditions)); // query parameter
            if (excludeParents != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_parents", excludeParents)); // query parameter
            if (excludeGameSeries != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_game_series", excludeGameSeries)); // query parameter
            if (ordering != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ordering", ordering)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Get a list of game trailers. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Movie</returns>
        public Movie GamesMoviesRead(string id)
        {
            ApiResponse<Movie> localVarResponse = GamesMoviesReadWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of game trailers. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>ApiResponse of Movie</returns>
        public ApiResponse<Movie> GamesMoviesReadWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamesApi->GamesMoviesRead");

            var localVarPath = "/games/{id}/movies";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesMoviesRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Movie>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Movie)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Movie)));
        }

        /// <summary>
        /// Get a list of game trailers. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of Movie</returns>
        public async System.Threading.Tasks.Task<Movie> GamesMoviesReadAsync(string id)
        {
            ApiResponse<Movie> localVarResponse = await GamesMoviesReadAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of game trailers. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Movie>> GamesMoviesReadAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamesApi->GamesMoviesRead");

            var localVarPath = "/games/{id}/movies";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesMoviesRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Movie>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Movie)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Movie)));
        }

        /// <summary>
        /// Get a list of parent games for DLC&#39;s and editions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GamesParentGamesList(string gamePk, int? page = null, int? pageSize = null)
        {
            ApiResponse<InlineResponse2003> localVarResponse = GamesParentGamesListWithHttpInfo(gamePk, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of parent games for DLC&#39;s and editions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> GamesParentGamesListWithHttpInfo(string gamePk, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'gamePk' is set
            if (gamePk == null)
                throw new ApiException(400, "Missing required parameter 'gamePk' when calling GamesApi->GamesParentGamesList");

            var localVarPath = "/games/{game_pk}/parent-games";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gamePk != null) localVarPathParams.Add("game_pk", Configuration.ApiClient.ParameterToString(gamePk)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesParentGamesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Get a list of parent games for DLC&#39;s and editions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> GamesParentGamesListAsync(string gamePk, int? page = null, int? pageSize = null)
        {
            ApiResponse<InlineResponse2003> localVarResponse = await GamesParentGamesListAsyncWithHttpInfo(gamePk, page, pageSize);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of parent games for DLC&#39;s and editions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GamesParentGamesListAsyncWithHttpInfo(string gamePk, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'gamePk' is set
            if (gamePk == null)
                throw new ApiException(400, "Missing required parameter 'gamePk' when calling GamesApi->GamesParentGamesList");

            var localVarPath = "/games/{game_pk}/parent-games";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gamePk != null) localVarPathParams.Add("game_pk", Configuration.ApiClient.ParameterToString(gamePk)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesParentGamesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Get details of the game. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>GameSingle</returns>
        public GameSingle GamesRead(string id)
        {
            ApiResponse<GameSingle> localVarResponse = GamesReadWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of the game. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>ApiResponse of GameSingle</returns>
        public ApiResponse<GameSingle> GamesReadWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamesApi->GamesRead");

            var localVarPath = "/games/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GameSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GameSingle)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GameSingle)));
        }

        /// <summary>
        /// Get details of the game. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of GameSingle</returns>
        public async System.Threading.Tasks.Task<GameSingle> GamesReadAsync(string id)
        {
            ApiResponse<GameSingle> localVarResponse = await GamesReadAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get details of the game. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of ApiResponse (GameSingle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GameSingle>> GamesReadAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamesApi->GamesRead");

            var localVarPath = "/games/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GameSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GameSingle)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GameSingle)));
        }

        /// <summary>
        /// Get a list of most recent posts from the game&#39;s subreddit. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Reddit</returns>
        public Reddit GamesRedditRead(string id)
        {
            ApiResponse<Reddit> localVarResponse = GamesRedditReadWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of most recent posts from the game&#39;s subreddit. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>ApiResponse of Reddit</returns>
        public ApiResponse<Reddit> GamesRedditReadWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamesApi->GamesRedditRead");

            var localVarPath = "/games/{id}/reddit";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesRedditRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Reddit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Reddit)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Reddit)));
        }

        /// <summary>
        /// Get a list of most recent posts from the game&#39;s subreddit. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of Reddit</returns>
        public async System.Threading.Tasks.Task<Reddit> GamesRedditReadAsync(string id)
        {
            ApiResponse<Reddit> localVarResponse = await GamesRedditReadAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of most recent posts from the game&#39;s subreddit. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of ApiResponse (Reddit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Reddit>> GamesRedditReadAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamesApi->GamesRedditRead");

            var localVarPath = "/games/{id}/reddit";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesRedditRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Reddit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Reddit)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Reddit)));
        }

        /// <summary>
        /// Get screenshots for the game. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 GamesScreenshotsList(string gamePk, string ordering = null, int? page = null, int? pageSize = null)
        {
            ApiResponse<InlineResponse2006> localVarResponse = GamesScreenshotsListWithHttpInfo(gamePk, ordering, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get screenshots for the game. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse<InlineResponse2006> GamesScreenshotsListWithHttpInfo(string gamePk, string ordering = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'gamePk' is set
            if (gamePk == null)
                throw new ApiException(400, "Missing required parameter 'gamePk' when calling GamesApi->GamesScreenshotsList");

            var localVarPath = "/games/{game_pk}/screenshots";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gamePk != null) localVarPathParams.Add("game_pk", Configuration.ApiClient.ParameterToString(gamePk)); // path parameter
            if (ordering != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ordering", ordering)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesScreenshotsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Get screenshots for the game. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> GamesScreenshotsListAsync(string gamePk, string ordering = null, int? page = null, int? pageSize = null)
        {
            ApiResponse<InlineResponse2006> localVarResponse = await GamesScreenshotsListAsyncWithHttpInfo(gamePk, ordering, page, pageSize);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get screenshots for the game. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GamesScreenshotsListAsyncWithHttpInfo(string gamePk, string ordering = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'gamePk' is set
            if (gamePk == null)
                throw new ApiException(400, "Missing required parameter 'gamePk' when calling GamesApi->GamesScreenshotsList");

            var localVarPath = "/games/{game_pk}/screenshots";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gamePk != null) localVarPathParams.Add("game_pk", Configuration.ApiClient.ParameterToString(gamePk)); // path parameter
            if (ordering != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ordering", ordering)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesScreenshotsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Get The Sitemap Games list. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GamesSitemapRead(int? page = null, int? pageSize = null)
        {
            ApiResponse<InlineResponse2004> localVarResponse = GamesSitemapReadWithHttpInfo(page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get The Sitemap Games list. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> GamesSitemapReadWithHttpInfo(int? page = null, int? pageSize = null)
        {

            var localVarPath = "/games/sitemap";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesSitemapRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Get The Sitemap Games list. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> GamesSitemapReadAsync(int? page = null, int? pageSize = null)
        {
            ApiResponse<InlineResponse2004> localVarResponse = await GamesSitemapReadAsyncWithHttpInfo(page, pageSize);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get The Sitemap Games list. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GamesSitemapReadAsyncWithHttpInfo(int? page = null, int? pageSize = null)
        {

            var localVarPath = "/games/sitemap";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesSitemapRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Get links to the stores that sell the game. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 GamesStoresList(string gamePk, string ordering = null, int? page = null, int? pageSize = null)
        {
            ApiResponse<InlineResponse2007> localVarResponse = GamesStoresListWithHttpInfo(gamePk, ordering, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get links to the stores that sell the game. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse<InlineResponse2007> GamesStoresListWithHttpInfo(string gamePk, string ordering = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'gamePk' is set
            if (gamePk == null)
                throw new ApiException(400, "Missing required parameter 'gamePk' when calling GamesApi->GamesStoresList");

            var localVarPath = "/games/{game_pk}/stores";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gamePk != null) localVarPathParams.Add("game_pk", Configuration.ApiClient.ParameterToString(gamePk)); // path parameter
            if (ordering != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ordering", ordering)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesStoresList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// Get links to the stores that sell the game. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> GamesStoresListAsync(string gamePk, string ordering = null, int? page = null, int? pageSize = null)
        {
            ApiResponse<InlineResponse2007> localVarResponse = await GamesStoresListAsyncWithHttpInfo(gamePk, ordering, page, pageSize);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get links to the stores that sell the game. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamePk"></param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GamesStoresListAsyncWithHttpInfo(string gamePk, string ordering = null, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'gamePk' is set
            if (gamePk == null)
                throw new ApiException(400, "Missing required parameter 'gamePk' when calling GamesApi->GamesStoresList");

            var localVarPath = "/games/{game_pk}/stores";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gamePk != null) localVarPathParams.Add("game_pk", Configuration.ApiClient.ParameterToString(gamePk)); // path parameter
            if (ordering != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ordering", ordering)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesStoresList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// Get a list of visually similar games. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>GameSingle</returns>
        public GameSingle GamesSuggestedRead(string id)
        {
            ApiResponse<GameSingle> localVarResponse = GamesSuggestedReadWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of visually similar games. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>ApiResponse of GameSingle</returns>
        public ApiResponse<GameSingle> GamesSuggestedReadWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamesApi->GamesSuggestedRead");

            var localVarPath = "/games/{id}/suggested";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesSuggestedRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GameSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GameSingle)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GameSingle)));
        }

        /// <summary>
        /// Get a list of visually similar games. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of GameSingle</returns>
        public async System.Threading.Tasks.Task<GameSingle> GamesSuggestedReadAsync(string id)
        {
            ApiResponse<GameSingle> localVarResponse = await GamesSuggestedReadAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of visually similar games. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of ApiResponse (GameSingle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GameSingle>> GamesSuggestedReadAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamesApi->GamesSuggestedRead");

            var localVarPath = "/games/{id}/suggested";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesSuggestedRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GameSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GameSingle)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GameSingle)));
        }

        /// <summary>
        /// Get streams on Twitch associated with the game . 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Twitch</returns>
        public Twitch GamesTwitchRead(string id)
        {
            ApiResponse<Twitch> localVarResponse = GamesTwitchReadWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get streams on Twitch associated with the game . 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>ApiResponse of Twitch</returns>
        public ApiResponse<Twitch> GamesTwitchReadWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamesApi->GamesTwitchRead");

            var localVarPath = "/games/{id}/twitch";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesTwitchRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Twitch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Twitch)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Twitch)));
        }

        /// <summary>
        /// Get streams on Twitch associated with the game . 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of Twitch</returns>
        public async System.Threading.Tasks.Task<Twitch> GamesTwitchReadAsync(string id)
        {
            ApiResponse<Twitch> localVarResponse = await GamesTwitchReadAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get streams on Twitch associated with the game . 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of ApiResponse (Twitch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Twitch>> GamesTwitchReadAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamesApi->GamesTwitchRead");

            var localVarPath = "/games/{id}/twitch";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesTwitchRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Twitch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Twitch)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Twitch)));
        }

        /// <summary>
        /// Get videos from YouTube associated with the game. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Youtube</returns>
        public Youtube GamesYoutubeRead(string id)
        {
            ApiResponse<Youtube> localVarResponse = GamesYoutubeReadWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get videos from YouTube associated with the game. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>ApiResponse of Youtube</returns>
        public ApiResponse<Youtube> GamesYoutubeReadWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamesApi->GamesYoutubeRead");

            var localVarPath = "/games/{id}/youtube";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesYoutubeRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Youtube>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Youtube)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Youtube)));
        }

        /// <summary>
        /// Get videos from YouTube associated with the game. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of Youtube</returns>
        public async System.Threading.Tasks.Task<Youtube> GamesYoutubeReadAsync(string id)
        {
            ApiResponse<Youtube> localVarResponse = await GamesYoutubeReadAsyncWithHttpInfo(id);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get videos from YouTube associated with the game. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID or a slug identifying this Game.</param>
        /// <returns>Task of ApiResponse (Youtube)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Youtube>> GamesYoutubeReadAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamesApi->GamesYoutubeRead");

            var localVarPath = "/games/{id}/youtube";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GamesYoutubeRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Youtube>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Youtube)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Youtube)));
        }

    }
}
