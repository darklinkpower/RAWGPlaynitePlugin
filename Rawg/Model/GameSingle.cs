/* 
 * RAWG Video Games Database API
 *
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - Every API request should have a User-Agent header with your app name. If you don???t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Rawg.Client;

namespace Rawg.Model
{
    /// <summary>
    /// GameSingle
    /// </summary>
    [DataContract]
    public partial class GameSingle :  IEquatable<GameSingle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GameSingle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GameSingle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GameSingle" /> class.
        /// </summary>
        /// <param name="rating">rating (required).</param>
        public GameSingle(decimal? rating = default(decimal?))
        {
            // to ensure "rating" is required (not null)
            if (rating == null)
            {
                throw new InvalidDataException("rating is a required property for GameSingle and cannot be null");
            }
            else
            {
                this.Rating = rating;
            }
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [DataMember(Name="slug", EmitDefaultValue=false)]
        public string Slug { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or Sets NameOriginal
        /// </summary>
        [DataMember(Name="name_original", EmitDefaultValue=false)]
        public string NameOriginal { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; private set; }

        /// <summary>
        /// Gets or Sets Metacritic
        /// </summary>
        [DataMember(Name="metacritic", EmitDefaultValue=false)]
        public int? Metacritic { get; private set; }

        /// <summary>
        /// Gets or Sets Released
        /// </summary>
        [DataMember(Name="released", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Released { get; private set; }

        /// <summary>
        /// Gets or Sets Tba
        /// </summary>
        [DataMember(Name="tba", EmitDefaultValue=false)]
        public bool? Tba { get; private set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; private set; }

        /// <summary>
        /// Gets or Sets BackgroundImage
        /// </summary>
        [DataMember(Name="background_image", EmitDefaultValue=false)]
        public string BackgroundImage { get; private set; }

        /// <summary>
        /// Gets or Sets BackgroundImageAdditional
        /// </summary>
        [DataMember(Name="background_image_additional", EmitDefaultValue=false)]
        public string BackgroundImageAdditional { get; private set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; private set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name="rating", EmitDefaultValue=false)]
        public decimal? Rating { get; set; }

        /// <summary>
        /// Gets or Sets RatingTop
        /// </summary>
        [DataMember(Name="rating_top", EmitDefaultValue=false)]
        public int? RatingTop { get; private set; }

        /// <summary>
        /// Gets or Sets Ratings
        /// </summary>
        [DataMember(Name="ratings", EmitDefaultValue=false)]
        public Object Ratings { get; private set; }

        /// <summary>
        /// Gets or Sets Reactions
        /// </summary>
        [DataMember(Name="reactions", EmitDefaultValue=false)]
        public Object Reactions { get; private set; }

        /// <summary>
        /// Gets or Sets Added
        /// </summary>
        [DataMember(Name="added", EmitDefaultValue=false)]
        public int? Added { get; private set; }

        /// <summary>
        /// Gets or Sets AddedByStatus
        /// </summary>
        [DataMember(Name="added_by_status", EmitDefaultValue=false)]
        public Object AddedByStatus { get; private set; }

        /// <summary>
        /// in hours
        /// </summary>
        /// <value>in hours</value>
        [DataMember(Name="playtime", EmitDefaultValue=false)]
        public int? Playtime { get; private set; }

        /// <summary>
        /// Gets or Sets ScreenshotsCount
        /// </summary>
        [DataMember(Name="screenshots_count", EmitDefaultValue=false)]
        public int? ScreenshotsCount { get; private set; }

        /// <summary>
        /// Gets or Sets MoviesCount
        /// </summary>
        [DataMember(Name="movies_count", EmitDefaultValue=false)]
        public int? MoviesCount { get; private set; }

        /// <summary>
        /// Gets or Sets CreatorsCount
        /// </summary>
        [DataMember(Name="creators_count", EmitDefaultValue=false)]
        public int? CreatorsCount { get; private set; }

        /// <summary>
        /// Gets or Sets AchievementsCount
        /// </summary>
        [DataMember(Name="achievements_count", EmitDefaultValue=false)]
        public int? AchievementsCount { get; private set; }

        /// <summary>
        /// Gets or Sets ParentAchievementsCount
        /// </summary>
        [DataMember(Name="parent_achievements_count", EmitDefaultValue=false)]
        public string ParentAchievementsCount { get; private set; }

        /// <summary>
        /// For example \&quot;https://www.reddit.com/r/uncharted/\&quot; or \&quot;uncharted\&quot;
        /// </summary>
        /// <value>For example \&quot;https://www.reddit.com/r/uncharted/\&quot; or \&quot;uncharted\&quot;</value>
        [DataMember(Name="reddit_url", EmitDefaultValue=false)]
        public string RedditUrl { get; private set; }

        /// <summary>
        /// Gets or Sets RedditName
        /// </summary>
        [DataMember(Name="reddit_name", EmitDefaultValue=false)]
        public string RedditName { get; private set; }

        /// <summary>
        /// Gets or Sets RedditDescription
        /// </summary>
        [DataMember(Name="reddit_description", EmitDefaultValue=false)]
        public string RedditDescription { get; private set; }

        /// <summary>
        /// Gets or Sets RedditLogo
        /// </summary>
        [DataMember(Name="reddit_logo", EmitDefaultValue=false)]
        public string RedditLogo { get; private set; }

        /// <summary>
        /// Gets or Sets RedditCount
        /// </summary>
        [DataMember(Name="reddit_count", EmitDefaultValue=false)]
        public int? RedditCount { get; private set; }

        /// <summary>
        /// Gets or Sets TwitchCount
        /// </summary>
        [DataMember(Name="twitch_count", EmitDefaultValue=false)]
        public string TwitchCount { get; private set; }

        /// <summary>
        /// Gets or Sets YoutubeCount
        /// </summary>
        [DataMember(Name="youtube_count", EmitDefaultValue=false)]
        public string YoutubeCount { get; private set; }

        /// <summary>
        /// Gets or Sets ReviewsTextCount
        /// </summary>
        [DataMember(Name="reviews_text_count", EmitDefaultValue=false)]
        public string ReviewsTextCount { get; private set; }

        /// <summary>
        /// Gets or Sets RatingsCount
        /// </summary>
        [DataMember(Name="ratings_count", EmitDefaultValue=false)]
        public int? RatingsCount { get; private set; }

        /// <summary>
        /// Gets or Sets SuggestionsCount
        /// </summary>
        [DataMember(Name="suggestions_count", EmitDefaultValue=false)]
        public int? SuggestionsCount { get; private set; }

        /// <summary>
        /// Gets or Sets AlternativeNames
        /// </summary>
        [DataMember(Name="alternative_names", EmitDefaultValue=false)]
        public List<string> AlternativeNames { get; private set; }

        /// <summary>
        /// For example \&quot;http://www.metacritic.com/game/playstation-4/the-witcher-3-wild-hunt\&quot;
        /// </summary>
        /// <value>For example \&quot;http://www.metacritic.com/game/playstation-4/the-witcher-3-wild-hunt\&quot;</value>
        [DataMember(Name="metacritic_url", EmitDefaultValue=false)]
        public string MetacriticUrl { get; private set; }

        /// <summary>
        /// Gets or Sets ParentsCount
        /// </summary>
        [DataMember(Name="parents_count", EmitDefaultValue=false)]
        public int? ParentsCount { get; private set; }

        /// <summary>
        /// Gets or Sets AdditionsCount
        /// </summary>
        [DataMember(Name="additions_count", EmitDefaultValue=false)]
        public int? AdditionsCount { get; private set; }

        /// <summary>
        /// Gets or Sets GameSeriesCount
        /// </summary>
        [DataMember(Name="game_series_count", EmitDefaultValue=false)]
        public int? GameSeriesCount { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GameSingle {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NameOriginal: ").Append(NameOriginal).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Metacritic: ").Append(Metacritic).Append("\n");
            sb.Append("  Released: ").Append(Released).Append("\n");
            sb.Append("  Tba: ").Append(Tba).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  BackgroundImage: ").Append(BackgroundImage).Append("\n");
            sb.Append("  BackgroundImageAdditional: ").Append(BackgroundImageAdditional).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  RatingTop: ").Append(RatingTop).Append("\n");
            sb.Append("  Ratings: ").Append(Ratings).Append("\n");
            sb.Append("  Reactions: ").Append(Reactions).Append("\n");
            sb.Append("  Added: ").Append(Added).Append("\n");
            sb.Append("  AddedByStatus: ").Append(AddedByStatus).Append("\n");
            sb.Append("  Playtime: ").Append(Playtime).Append("\n");
            sb.Append("  ScreenshotsCount: ").Append(ScreenshotsCount).Append("\n");
            sb.Append("  MoviesCount: ").Append(MoviesCount).Append("\n");
            sb.Append("  CreatorsCount: ").Append(CreatorsCount).Append("\n");
            sb.Append("  AchievementsCount: ").Append(AchievementsCount).Append("\n");
            sb.Append("  ParentAchievementsCount: ").Append(ParentAchievementsCount).Append("\n");
            sb.Append("  RedditUrl: ").Append(RedditUrl).Append("\n");
            sb.Append("  RedditName: ").Append(RedditName).Append("\n");
            sb.Append("  RedditDescription: ").Append(RedditDescription).Append("\n");
            sb.Append("  RedditLogo: ").Append(RedditLogo).Append("\n");
            sb.Append("  RedditCount: ").Append(RedditCount).Append("\n");
            sb.Append("  TwitchCount: ").Append(TwitchCount).Append("\n");
            sb.Append("  YoutubeCount: ").Append(YoutubeCount).Append("\n");
            sb.Append("  ReviewsTextCount: ").Append(ReviewsTextCount).Append("\n");
            sb.Append("  RatingsCount: ").Append(RatingsCount).Append("\n");
            sb.Append("  SuggestionsCount: ").Append(SuggestionsCount).Append("\n");
            sb.Append("  AlternativeNames: ").Append(AlternativeNames).Append("\n");
            sb.Append("  MetacriticUrl: ").Append(MetacriticUrl).Append("\n");
            sb.Append("  ParentsCount: ").Append(ParentsCount).Append("\n");
            sb.Append("  AdditionsCount: ").Append(AdditionsCount).Append("\n");
            sb.Append("  GameSeriesCount: ").Append(GameSeriesCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GameSingle);
        }

        /// <summary>
        /// Returns true if GameSingle instances are equal
        /// </summary>
        /// <param name="input">Instance of GameSingle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GameSingle input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NameOriginal == input.NameOriginal ||
                    (this.NameOriginal != null &&
                    this.NameOriginal.Equals(input.NameOriginal))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Metacritic == input.Metacritic ||
                    (this.Metacritic != null &&
                    this.Metacritic.Equals(input.Metacritic))
                ) && 
                (
                    this.Released == input.Released ||
                    (this.Released != null &&
                    this.Released.Equals(input.Released))
                ) && 
                (
                    this.Tba == input.Tba ||
                    (this.Tba != null &&
                    this.Tba.Equals(input.Tba))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.BackgroundImage == input.BackgroundImage ||
                    (this.BackgroundImage != null &&
                    this.BackgroundImage.Equals(input.BackgroundImage))
                ) && 
                (
                    this.BackgroundImageAdditional == input.BackgroundImageAdditional ||
                    (this.BackgroundImageAdditional != null &&
                    this.BackgroundImageAdditional.Equals(input.BackgroundImageAdditional))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.RatingTop == input.RatingTop ||
                    (this.RatingTop != null &&
                    this.RatingTop.Equals(input.RatingTop))
                ) && 
                (
                    this.Ratings == input.Ratings ||
                    (this.Ratings != null &&
                    this.Ratings.Equals(input.Ratings))
                ) && 
                (
                    this.Reactions == input.Reactions ||
                    (this.Reactions != null &&
                    this.Reactions.Equals(input.Reactions))
                ) && 
                (
                    this.Added == input.Added ||
                    (this.Added != null &&
                    this.Added.Equals(input.Added))
                ) && 
                (
                    this.AddedByStatus == input.AddedByStatus ||
                    (this.AddedByStatus != null &&
                    this.AddedByStatus.Equals(input.AddedByStatus))
                ) && 
                (
                    this.Playtime == input.Playtime ||
                    (this.Playtime != null &&
                    this.Playtime.Equals(input.Playtime))
                ) && 
                (
                    this.ScreenshotsCount == input.ScreenshotsCount ||
                    (this.ScreenshotsCount != null &&
                    this.ScreenshotsCount.Equals(input.ScreenshotsCount))
                ) && 
                (
                    this.MoviesCount == input.MoviesCount ||
                    (this.MoviesCount != null &&
                    this.MoviesCount.Equals(input.MoviesCount))
                ) && 
                (
                    this.CreatorsCount == input.CreatorsCount ||
                    (this.CreatorsCount != null &&
                    this.CreatorsCount.Equals(input.CreatorsCount))
                ) && 
                (
                    this.AchievementsCount == input.AchievementsCount ||
                    (this.AchievementsCount != null &&
                    this.AchievementsCount.Equals(input.AchievementsCount))
                ) && 
                (
                    this.ParentAchievementsCount == input.ParentAchievementsCount ||
                    (this.ParentAchievementsCount != null &&
                    this.ParentAchievementsCount.Equals(input.ParentAchievementsCount))
                ) && 
                (
                    this.RedditUrl == input.RedditUrl ||
                    (this.RedditUrl != null &&
                    this.RedditUrl.Equals(input.RedditUrl))
                ) && 
                (
                    this.RedditName == input.RedditName ||
                    (this.RedditName != null &&
                    this.RedditName.Equals(input.RedditName))
                ) && 
                (
                    this.RedditDescription == input.RedditDescription ||
                    (this.RedditDescription != null &&
                    this.RedditDescription.Equals(input.RedditDescription))
                ) && 
                (
                    this.RedditLogo == input.RedditLogo ||
                    (this.RedditLogo != null &&
                    this.RedditLogo.Equals(input.RedditLogo))
                ) && 
                (
                    this.RedditCount == input.RedditCount ||
                    (this.RedditCount != null &&
                    this.RedditCount.Equals(input.RedditCount))
                ) && 
                (
                    this.TwitchCount == input.TwitchCount ||
                    (this.TwitchCount != null &&
                    this.TwitchCount.Equals(input.TwitchCount))
                ) && 
                (
                    this.YoutubeCount == input.YoutubeCount ||
                    (this.YoutubeCount != null &&
                    this.YoutubeCount.Equals(input.YoutubeCount))
                ) && 
                (
                    this.ReviewsTextCount == input.ReviewsTextCount ||
                    (this.ReviewsTextCount != null &&
                    this.ReviewsTextCount.Equals(input.ReviewsTextCount))
                ) && 
                (
                    this.RatingsCount == input.RatingsCount ||
                    (this.RatingsCount != null &&
                    this.RatingsCount.Equals(input.RatingsCount))
                ) && 
                (
                    this.SuggestionsCount == input.SuggestionsCount ||
                    (this.SuggestionsCount != null &&
                    this.SuggestionsCount.Equals(input.SuggestionsCount))
                ) && 
                (
                    this.AlternativeNames == input.AlternativeNames ||
                    this.AlternativeNames != null &&
                    this.AlternativeNames.SequenceEqual(input.AlternativeNames)
                ) && 
                (
                    this.MetacriticUrl == input.MetacriticUrl ||
                    (this.MetacriticUrl != null &&
                    this.MetacriticUrl.Equals(input.MetacriticUrl))
                ) && 
                (
                    this.ParentsCount == input.ParentsCount ||
                    (this.ParentsCount != null &&
                    this.ParentsCount.Equals(input.ParentsCount))
                ) && 
                (
                    this.AdditionsCount == input.AdditionsCount ||
                    (this.AdditionsCount != null &&
                    this.AdditionsCount.Equals(input.AdditionsCount))
                ) && 
                (
                    this.GameSeriesCount == input.GameSeriesCount ||
                    (this.GameSeriesCount != null &&
                    this.GameSeriesCount.Equals(input.GameSeriesCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Slug != null)
                    hashCode = hashCode * 59 + this.Slug.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NameOriginal != null)
                    hashCode = hashCode * 59 + this.NameOriginal.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Metacritic != null)
                    hashCode = hashCode * 59 + this.Metacritic.GetHashCode();
                if (this.Released != null)
                    hashCode = hashCode * 59 + this.Released.GetHashCode();
                if (this.Tba != null)
                    hashCode = hashCode * 59 + this.Tba.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.BackgroundImage != null)
                    hashCode = hashCode * 59 + this.BackgroundImage.GetHashCode();
                if (this.BackgroundImageAdditional != null)
                    hashCode = hashCode * 59 + this.BackgroundImageAdditional.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                if (this.Rating != null)
                    hashCode = hashCode * 59 + this.Rating.GetHashCode();
                if (this.RatingTop != null)
                    hashCode = hashCode * 59 + this.RatingTop.GetHashCode();
                if (this.Ratings != null)
                    hashCode = hashCode * 59 + this.Ratings.GetHashCode();
                if (this.Reactions != null)
                    hashCode = hashCode * 59 + this.Reactions.GetHashCode();
                if (this.Added != null)
                    hashCode = hashCode * 59 + this.Added.GetHashCode();
                if (this.AddedByStatus != null)
                    hashCode = hashCode * 59 + this.AddedByStatus.GetHashCode();
                if (this.Playtime != null)
                    hashCode = hashCode * 59 + this.Playtime.GetHashCode();
                if (this.ScreenshotsCount != null)
                    hashCode = hashCode * 59 + this.ScreenshotsCount.GetHashCode();
                if (this.MoviesCount != null)
                    hashCode = hashCode * 59 + this.MoviesCount.GetHashCode();
                if (this.CreatorsCount != null)
                    hashCode = hashCode * 59 + this.CreatorsCount.GetHashCode();
                if (this.AchievementsCount != null)
                    hashCode = hashCode * 59 + this.AchievementsCount.GetHashCode();
                if (this.ParentAchievementsCount != null)
                    hashCode = hashCode * 59 + this.ParentAchievementsCount.GetHashCode();
                if (this.RedditUrl != null)
                    hashCode = hashCode * 59 + this.RedditUrl.GetHashCode();
                if (this.RedditName != null)
                    hashCode = hashCode * 59 + this.RedditName.GetHashCode();
                if (this.RedditDescription != null)
                    hashCode = hashCode * 59 + this.RedditDescription.GetHashCode();
                if (this.RedditLogo != null)
                    hashCode = hashCode * 59 + this.RedditLogo.GetHashCode();
                if (this.RedditCount != null)
                    hashCode = hashCode * 59 + this.RedditCount.GetHashCode();
                if (this.TwitchCount != null)
                    hashCode = hashCode * 59 + this.TwitchCount.GetHashCode();
                if (this.YoutubeCount != null)
                    hashCode = hashCode * 59 + this.YoutubeCount.GetHashCode();
                if (this.ReviewsTextCount != null)
                    hashCode = hashCode * 59 + this.ReviewsTextCount.GetHashCode();
                if (this.RatingsCount != null)
                    hashCode = hashCode * 59 + this.RatingsCount.GetHashCode();
                if (this.SuggestionsCount != null)
                    hashCode = hashCode * 59 + this.SuggestionsCount.GetHashCode();
                if (this.AlternativeNames != null)
                    hashCode = hashCode * 59 + this.AlternativeNames.GetHashCode();
                if (this.MetacriticUrl != null)
                    hashCode = hashCode * 59 + this.MetacriticUrl.GetHashCode();
                if (this.ParentsCount != null)
                    hashCode = hashCode * 59 + this.ParentsCount.GetHashCode();
                if (this.AdditionsCount != null)
                    hashCode = hashCode * 59 + this.AdditionsCount.GetHashCode();
                if (this.GameSeriesCount != null)
                    hashCode = hashCode * 59 + this.GameSeriesCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Slug (string) minLength
            if(this.Slug != null && this.Slug.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Slug, length must be greater than 1.", new [] { "Slug" });
            }

            // Slug (string) pattern
            Regex regexSlug = new Regex(@"^[-a-zA-Z0-9_]+$", RegexOptions.CultureInvariant);
            if (false == regexSlug.Match(this.Slug).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Slug, must match a pattern of " + regexSlug, new [] { "Slug" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // NameOriginal (string) minLength
            if(this.NameOriginal != null && this.NameOriginal.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NameOriginal, length must be greater than 1.", new [] { "NameOriginal" });
            }

            // Description (string) minLength
            if(this.Description != null && this.Description.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            // Website (string) minLength
            if(this.Website != null && this.Website.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Website, length must be greater than 1.", new [] { "Website" });
            }

            // RedditUrl (string) minLength
            if(this.RedditUrl != null && this.RedditUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RedditUrl, length must be greater than 1.", new [] { "RedditUrl" });
            }

            // RedditName (string) minLength
            if(this.RedditName != null && this.RedditName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RedditName, length must be greater than 1.", new [] { "RedditName" });
            }

            // RedditDescription (string) minLength
            if(this.RedditDescription != null && this.RedditDescription.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RedditDescription, length must be greater than 1.", new [] { "RedditDescription" });
            }

            // RedditLogo (string) minLength
            if(this.RedditLogo != null && this.RedditLogo.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RedditLogo, length must be greater than 1.", new [] { "RedditLogo" });
            }

            // MetacriticUrl (string) minLength
            if(this.MetacriticUrl != null && this.MetacriticUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MetacriticUrl, length must be greater than 1.", new [] { "MetacriticUrl" });
            }

            yield break;
        }
    }

}
